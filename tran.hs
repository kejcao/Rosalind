-- https://rosalind.info/problems/tran/

a = "AACGCATCAAACACCGTTGGGAAAGCTAATCAGAGTATGTCCGTTGTGAGTTTACCACACATTGCTTTCAGACGTCCATTCCACTTTTGCGTAGCTGTGACACCTCAAAACTGGAATTTGACCTGAACGCACCACGGCCTTGTCCGCGCTTCCGGAGCCGCGAGTCCAAGACAGACTCGATTTACTGGTTGCGACAAGGAACAACTTGCACCGGCAGCAGGTGTCTAGATCACCCTTTGCTCCAGTCATAGGTAAGGTCGGCGTTTGTGCACTACTTTTGGGGCTTTACACCTGCTTCAACAAACTCCGCGTACCTCAACGTCCTATGCTTGATTCTGGCGGTCAAACCAAAGGGAGTCATCTGCCAAAATAGGTAGAGCACGTGAGGCTACACTTAGAGCAATAACATTAGGTAGAAATATAAAGGCTTGCAGCTGCTCCACGCATACGGCTTGGAGTATAAGAGGAAACAGCGAAGTACGCGGGGGGTCCCACTGTATTACAACACATGCTAGCGGTGCCTCTTACACGCCGCCGCCGGTCCCCAACGCTGTACGTGGTGTTGGGCACTGTCCATTAGATTTTCGGCCAGGGAAATCCGCGGGAGGTCGGACCTGGTACTAGTGGAAGGACCTTCCTACCGTCAATTTAAGGTACTTAAGGGGAACTCGCACGATGTGGATGAACTGGCCCTATCTTGTTATGTTTATAGGGGTCCGGCCTCTGGCGGTTTTTTGGGGTCCGGGCACGGAGTTCACCGGCCTCGCTGCTTACAGGACCACTCAACATTATCGGAGGCTGGTGACGGGGTATGGCGGACGGAGTCATTTATTGGGGAAACGTCCTGTCTGGTCATTGCACCTCGCCTGTTATCTATTTCCTGCCTCAAGGATTGCTCTAGCGCCTGCGGGATGGCCCTAGGCAGGGACGGATCAACCTTACGGGTTC"

b = "AATGTATAAAGCATCGCTAGAAAAGCTAATCAAGGTACGTCCGTTGTGGGTTCACATCACATAACGCTCAAGTCCCCACACTACTTTTGCCTAAGTACGACACATCGGAACAGAATTCTAACCTAGATGCACCCCGGCCTAGTCCGCGCGCTCGGAATCACGAGTCCAAGACAGACTTAGTTTACAGGCCGCGTCGAAAGACGATCTGCCCGGGCAGCAGACGTCTACTCTTCTCCCAGCACGGGTCATACACGGGATCTATGTTTATGTACTGCGTTTGTGGCCTAACGCCTCCTTTAATAAGTTCCGTGTATTCCGATATTCTATCATTAGCTCGGACGCATAGGTTAGGGAAAGTTATCTGGCGAAACAAGTAGTGCATGTGAGGCTACACTTGGAGCGGTAGCCTTCCGTAGAGACATAGAGGCTTGCAGTTGCTCTGCGCATACGGTTTGGAGGATTAGTGGAAACAGTAAGGCACGCGGGAAGCGCCGACGTGTTACGACATATGTTGGCAGTGTCTCCCGCACGATCAGTTCTGTCCTACATTCTGCAGATGGTGTTGGGCACTGTCTATTGAATTTTCGACTACGGAAATCCTTGAGGGGACGGATCTGATACTAACGGAAGGACCTTCTGGCCGTCAACAGAAGGTACTGGAGTGGAACCCGAACGATGTGGACCAAGCGGCCCTATCCTGTTATACCTATAGCGGGCCGGCGTCGCACGATTTTTTGGGATCTGGGCGCGGCGTCTATCGACCTCACTGATTACAGAAACACTCAACATTATTACAGGTTGGTGTCAGAGTACGGCGAACTAGGCCATCCATTGTGGAAACATCCAGCCCGCACGTCGCGCAACGTCTGTTATGTATTTGACGCCCCGAGAATTACTCTGGCGCCCGTGGGCTGACCCTAGGCAGAGCCGAGTCGACCTGACGGGTCC"

-- transitions
f 'A' 'G' = 1
f 'G' 'A' = 1
f 'C' 'T' = 1
f 'T' 'C' = 1
f x y
  | x == y = 0
  | otherwise = 2 -- transversions

count n = length . filter (== n)

main = print $ fromIntegral (count 1 x) / fromIntegral (count 2 x)
  where
    x = zipWith f a b
